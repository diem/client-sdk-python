/* automatically generated by rust-bindgen */

#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum LibraStatus {
    OK = 0,
    InvalidArgument = -1,
    InternalError = -255,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LibraEventHandle {
    pub count: u64,
    pub key: [u8; 40usize],
}
#[test]
fn bindgen_test_layout_LibraEventHandle() {
    assert_eq!(
        ::std::mem::size_of::<LibraEventHandle>(),
        48usize,
        concat!("Size of: ", stringify!(LibraEventHandle))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraEventHandle>(),
        8usize,
        concat!("Alignment of ", stringify!(LibraEventHandle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraEventHandle>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraEventHandle),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraEventHandle>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraEventHandle),
            "::",
            stringify!(key)
        )
    );
}
impl Default for LibraEventHandle {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LibraAccountResource {
    pub balance: u64,
    pub sequence: u64,
    pub authentication_key: [u8; 32usize],
    pub delegated_key_rotation_capability: bool,
    pub delegated_withdrawal_capability: bool,
    pub sent_events: LibraEventHandle,
    pub received_events: LibraEventHandle,
}
#[test]
fn bindgen_test_layout_LibraAccountResource() {
    assert_eq!(
        ::std::mem::size_of::<LibraAccountResource>(),
        152usize,
        concat!("Size of: ", stringify!(LibraAccountResource))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraAccountResource>(),
        8usize,
        concat!("Alignment of ", stringify!(LibraAccountResource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraAccountResource>())).balance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(balance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraAccountResource>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraAccountResource>())).authentication_key as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(authentication_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraAccountResource>())).delegated_key_rotation_capability
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(delegated_key_rotation_capability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraAccountResource>())).delegated_withdrawal_capability
                as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(delegated_withdrawal_capability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraAccountResource>())).sent_events as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(sent_events)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraAccountResource>())).received_events as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountResource),
            "::",
            stringify!(received_events)
        )
    );
}
impl Default for LibraAccountResource {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct LibraP2PTransferTransactionArgument {
    pub value: u64,
    pub address: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_LibraP2PTransferTransactionArgument() {
    assert_eq!(
        ::std::mem::size_of::<LibraP2PTransferTransactionArgument>(),
        40usize,
        concat!("Size of: ", stringify!(LibraP2PTransferTransactionArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraP2PTransferTransactionArgument>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LibraP2PTransferTransactionArgument)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraP2PTransferTransactionArgument>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraP2PTransferTransactionArgument),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraP2PTransferTransactionArgument>())).address as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraP2PTransferTransactionArgument),
            "::",
            stringify!(address)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TransactionType {
    PeerToPeer = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct LibraTransactionPayload {
    pub txn_type: TransactionType,
    pub args: LibraP2PTransferTransactionArgument,
}
#[test]
fn bindgen_test_layout_LibraTransactionPayload() {
    assert_eq!(
        ::std::mem::size_of::<LibraTransactionPayload>(),
        48usize,
        concat!("Size of: ", stringify!(LibraTransactionPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraTransactionPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(LibraTransactionPayload))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraTransactionPayload>())).txn_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraTransactionPayload),
            "::",
            stringify!(txn_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraTransactionPayload>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraTransactionPayload),
            "::",
            stringify!(args)
        )
    );
}
impl Default for LibraTransactionPayload {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct LibraRawTransaction {
    pub sender: [u8; 32usize],
    pub sequence_number: u64,
    pub payload: LibraTransactionPayload,
    pub max_gas_amount: u64,
    pub gas_unit_price: u64,
    pub expiration_time_secs: u64,
}
#[test]
fn bindgen_test_layout_LibraRawTransaction() {
    assert_eq!(
        ::std::mem::size_of::<LibraRawTransaction>(),
        112usize,
        concat!("Size of: ", stringify!(LibraRawTransaction))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraRawTransaction>(),
        8usize,
        concat!("Alignment of ", stringify!(LibraRawTransaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraRawTransaction>())).sender as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraRawTransaction>())).sequence_number as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraRawTransaction>())).payload as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraRawTransaction>())).max_gas_amount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(max_gas_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraRawTransaction>())).gas_unit_price as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(gas_unit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraRawTransaction>())).expiration_time_secs as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraRawTransaction),
            "::",
            stringify!(expiration_time_secs)
        )
    );
}
impl Default for LibraRawTransaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LibraSignedTransaction {
    pub raw_txn: LibraRawTransaction,
    pub public_key: [u8; 32usize],
    pub signature: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_LibraSignedTransaction() {
    assert_eq!(
        ::std::mem::size_of::<LibraSignedTransaction>(),
        208usize,
        concat!("Size of: ", stringify!(LibraSignedTransaction))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraSignedTransaction>(),
        8usize,
        concat!("Alignment of ", stringify!(LibraSignedTransaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraSignedTransaction>())).raw_txn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraSignedTransaction),
            "::",
            stringify!(raw_txn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraSignedTransaction>())).public_key as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraSignedTransaction),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LibraSignedTransaction>())).signature as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraSignedTransaction),
            "::",
            stringify!(signature)
        )
    );
}
impl Default for LibraSignedTransaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct LibraAccountKey {
    pub address: [u8; 32usize],
    pub private_key: [u8; 32usize],
    pub public_key: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_LibraAccountKey() {
    assert_eq!(
        ::std::mem::size_of::<LibraAccountKey>(),
        96usize,
        concat!("Size of: ", stringify!(LibraAccountKey))
    );
    assert_eq!(
        ::std::mem::align_of::<LibraAccountKey>(),
        1usize,
        concat!("Alignment of ", stringify!(LibraAccountKey))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraAccountKey>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountKey),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraAccountKey>())).private_key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountKey),
            "::",
            stringify!(private_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LibraAccountKey>())).public_key as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LibraAccountKey),
            "::",
            stringify!(public_key)
        )
    );
}
