# pyre-strict

import typing

class EventHandle:
    @property
    def count(self) -> int: ...
    @property
    def key(self) -> bytes: ...

class AccountResource:
    @staticmethod
    def create(addr_bytes: bytes, lcs_bytes: bytes) -> AccountResource: ...
    @property
    def address(self) -> bytes: ...
    @property
    def balance(self) -> int: ...
    @property
    def sequence(self) -> int: ...
    @property
    def authentication_key(self) -> bytes: ...
    @property
    def delegated_key_rotation_capability(self) -> bool: ...
    @property
    def delegated_withdrawal_capability(self) -> bool: ...
    @property
    def sent_events(self) -> EventHandle: ...
    @property
    def received_events(self) -> EventHandle: ...

class TransactionUtils:
    @staticmethod
    def createSignedP2PTransaction(
        sender_private_key: bytes,
        receiver: bytes,
        sender_sequence: int,
        num_coins_microlibra: int,
        *ignore: typing.Any,
        expiration_time: int,
        max_gas_amount: int = 140000,
        gas_unit_price: int = 0
    ) -> BytesWrapper: ...

class BytesWrapper:
    @property
    def byte(self) -> bytes: ...
    @property
    def hex(self) -> str: ...

class AccountKey:
    def __init__(self, private_key_bytes: bytes) -> None: ...
    @property
    def address(self) -> bytes: ...
    @property
    def public_key(self) -> bytes: ...
    @property
    def private_key(self) -> bytes: ...
