import typing
from pylibra import serde_types as st
from pylibra.libra_types import (
    Script,
    TypeTag,
    AccountAddress,
    TransactionArgument__Bool,
    TransactionArgument__U8,
    TransactionArgument__U64,
    TransactionArgument__U128,
    TransactionArgument__Address,
    TransactionArgument__U8Vector,
)


def encode_add_currency_to_account_script(currency: TypeTag) -> Script:
    """Add the currency identified by the type `currency` to the sending accounts.

    Aborts if the account already holds a balance fo `currency` type.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(4), st.uint8(8), st.uint8(2), st.uint8(5), st.uint8(10), st.uint8(7), st.uint8(7), st.uint8(17), st.uint8(26), st.uint8(8), st.uint8(43), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(12), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(95), st.uint8(99), st.uint8(117), st.uint8(114), st.uint8(114), st.uint8(101), st.uint8(110), st.uint8(99), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[currency],
        args=[],
    )


def encode_add_recovery_rotation_capability_script(recovery_address: AccountAddress) -> Script:
    """Add the `KeyRotationCapability` for `to_recover_account` to the `RecoveryAddress` resource under `recovery_address`.

    Aborts if `to_recovery_account` and `to_recovery_address belong to different VASPs, if
    `recovery_address` does not have a `RecoveryAddress` resource, or if
    `to_recover_account` has already extracted its `KeyRotationCapability`.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(5), st.uint8(7), st.uint8(12), st.uint8(40), st.uint8(8), st.uint8(52), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(0), st.uint8(15), st.uint8(82), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(118), st.uint8(101), st.uint8(114), st.uint8(121), st.uint8(65), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(23), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(95), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__Address(recovery_address)],
    )


def encode_add_validator_script(validator_address: AccountAddress) -> Script:
    """Add `new_validator` to the pending validator set.

    Fails if the `new_validator` address is already in the validator set or does not have
    a `ValidatorConfig` resource stored at the address.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(17), st.uint8(4), st.uint8(30), st.uint8(4), st.uint8(5), st.uint8(34), st.uint8(39), st.uint8(7), st.uint8(73), st.uint8(127), st.uint8(8), st.uint8(200), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(11), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(83), st.uint8(121), st.uint8(115), st.uint8(116), st.uint8(101), st.uint8(109), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(13), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(95), st.uint8(118), st.uint8(97), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(10), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(2), st.uint8(14), st.uint8(2), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(2), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__Address(validator_address)],
    )


def encode_burn_script(token: TypeTag, sliding_nonce: st.uint64, preburn_address: AccountAddress) -> Script:
    """Permanently destroy the `Token`s stored in the oldest burn request under the `Preburn` resource.

    This will only succeed if `account` has a `MintCapability<Token>`, a `Preburn<Token>`
    resource exists under `preburn_address`, and there is a pending burn request.
    sliding_nonce is a unique nonce for operation, see sliding_nonce.move for details
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(3), st.uint8(4), st.uint8(11), st.uint8(4), st.uint8(15), st.uint8(2), st.uint8(5), st.uint8(17), st.uint8(17), st.uint8(7), st.uint8(34), st.uint8(46), st.uint8(8), st.uint8(80), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(5), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(4), st.uint8(98), st.uint8(117), st.uint8(114), st.uint8(110), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(7), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(56), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[token],
        args=[TransactionArgument__U64(sliding_nonce), TransactionArgument__Address(preburn_address)],
    )


def encode_burn_txn_fees_script(coin_type: TypeTag) -> Script:
    """Burn transaction fees that have been collected in the given `currency` and relinquish to the association.

    The currency must be non-synthetic.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(18), st.uint8(4), st.uint8(31), st.uint8(6), st.uint8(5), st.uint8(37), st.uint8(39), st.uint8(7), st.uint8(76), st.uint8(129), st.uint8(1), st.uint8(8), st.uint8(205), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(2), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(14), st.uint8(84), st.uint8(114), st.uint8(97), st.uint8(110), st.uint8(115), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(70), st.uint8(101), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(9), st.uint8(98), st.uint8(117), st.uint8(114), st.uint8(110), st.uint8(95), st.uint8(102), st.uint8(101), st.uint8(101), st.uint8(115), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(10), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(1), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(1), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[],
    )


def encode_cancel_burn_script(token: TypeTag, preburn_address: AccountAddress) -> Script:
    """Cancel the oldest burn request from `preburn_address` and return the funds.

    Fails if the sender does not have a published `BurnCapability<Token>`.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(4), st.uint8(8), st.uint8(2), st.uint8(5), st.uint8(10), st.uint8(8), st.uint8(7), st.uint8(18), st.uint8(25), st.uint8(8), st.uint8(43), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(11), st.uint8(99), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(108), st.uint8(95), st.uint8(98), st.uint8(117), st.uint8(114), st.uint8(110), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(56), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[token],
        args=[TransactionArgument__Address(preburn_address)],
    )


def encode_create_child_vasp_account_script(
    coin_type: TypeTag,
    child_address: AccountAddress,
    auth_key_prefix: typing.Sequence[st.uint8],
    add_all_currencies: st.bool,
    child_initial_balance: st.uint64,
) -> Script:
    """Create a `ChildVASP` account for sender `parent_vasp` at `child_address` with a balance of `child_initial_balance` in `CoinType` and an initial authentication_key `auth_key_prefix | child_address`.

    If `add_all_currencies` is true, the child address will have a zero balance in all
    available currencies in the system. This account will a child of the transaction
    sender, which must be a ParentVASP.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(13), st.uint8(3), st.uint8(17), st.uint8(34), st.uint8(4), st.uint8(51), st.uint8(8), st.uint8(5), st.uint8(59), st.uint8(62), st.uint8(7), st.uint8(121), st.uint8(219), st.uint8(1), st.uint8(8), st.uint8(212), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(7), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(0), st.uint8(0), st.uint8(9), st.uint8(6), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(9), st.uint8(2), st.uint8(10), st.uint8(4), st.uint8(10), st.uint8(1), st.uint8(9), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(3), st.uint8(6), st.uint8(8), st.uint8(2), st.uint8(5), st.uint8(3), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(14), st.uint8(80), st.uint8(97), st.uint8(114), st.uint8(101), st.uint8(110), st.uint8(116), st.uint8(86), st.uint8(65), st.uint8(83), st.uint8(80), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(18), st.uint8(87), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(25), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(104), st.uint8(105), st.uint8(108), st.uint8(100), st.uint8(95), st.uint8(118), st.uint8(97), st.uint8(115), st.uint8(112), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(27), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(8), st.uint8(112), st.uint8(97), st.uint8(121), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(27), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(7), st.uint8(8), st.uint8(27), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(5), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(10), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(10), st.uint8(4), st.uint8(6), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(36), st.uint8(3), st.uint8(14), st.uint8(5), st.uint8(23), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(3), st.uint8(12), st.uint8(6), st.uint8(14), st.uint8(6), st.uint8(10), st.uint8(1), st.uint8(10), st.uint8(4), st.uint8(56), st.uint8(2), st.uint8(11), st.uint8(6), st.uint8(17), st.uint8(5), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(5), st.uint8(56), st.uint8(3), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[
            TransactionArgument__Address(child_address),
            TransactionArgument__U8Vector(auth_key_prefix),
            TransactionArgument__Bool(add_all_currencies),
            TransactionArgument__U64(child_initial_balance),
        ],
    )


def encode_create_designated_dealer_script(
    coin_type: TypeTag,
    sliding_nonce: st.uint64,
    new_account_address: AccountAddress,
    auth_key_prefix: typing.Sequence[st.uint8],
) -> Script:
    """Create designated dealer account at 'new_account_address' and 'auth_key_prefix' for nonsynthetic CoinType.

    Create dealer and preburn resource.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(8), st.uint8(2), st.uint8(8), st.uint8(9), st.uint8(3), st.uint8(17), st.uint8(28), st.uint8(4), st.uint8(45), st.uint8(6), st.uint8(5), st.uint8(51), st.uint8(62), st.uint8(7), st.uint8(113), st.uint8(203), st.uint8(1), st.uint8(8), st.uint8(188), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(2), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(7), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(8), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(3), st.uint8(9), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(1), st.uint8(10), st.uint8(6), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(9), st.uint8(4), st.uint8(10), st.uint8(1), st.uint8(9), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(3), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(16), st.uint8(68), st.uint8(101), st.uint8(115), st.uint8(105), st.uint8(103), st.uint8(110), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(100), st.uint8(68), st.uint8(101), st.uint8(97), st.uint8(108), st.uint8(101), st.uint8(114), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(8), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(95), st.uint8(116), st.uint8(105), st.uint8(101), st.uint8(114), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(24), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(100), st.uint8(101), st.uint8(115), st.uint8(105), st.uint8(103), st.uint8(110), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(100), st.uint8(95), st.uint8(100), st.uint8(101), st.uint8(97), st.uint8(108), st.uint8(101), st.uint8(114), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(7), st.uint8(8), st.uint8(31), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(4), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(6), st.uint8(32), st.uint8(161), st.uint8(7), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(6), st.uint8(64), st.uint8(75), st.uint8(76), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(6), st.uint8(128), st.uint8(240), st.uint8(250), st.uint8(2), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(6), st.uint8(0), st.uint8(101), st.uint8(205), st.uint8(29), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(4), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[
            TransactionArgument__U64(sliding_nonce),
            TransactionArgument__Address(new_account_address),
            TransactionArgument__U8Vector(auth_key_prefix),
        ],
    )


def encode_create_parent_vasp_account_script(
    coin_type: TypeTag,
    new_account_address: AccountAddress,
    auth_key_prefix: typing.Sequence[st.uint8],
    human_name: typing.Sequence[st.uint8],
    base_url: typing.Sequence[st.uint8],
    compliance_public_key: typing.Sequence[st.uint8],
    add_all_currencies: st.bool,
) -> Script:
    """Create an account with the ParentVASP role at `address` with authentication key `auth_key_prefix` | `new_account_address` and a 0 balance of type `currency`.

    If `add_all_currencies` is true, 0 balances for all available currencies in the system
    will also be added. This can only be invoked by an Association account.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(18), st.uint8(4), st.uint8(31), st.uint8(6), st.uint8(5), st.uint8(37), st.uint8(62), st.uint8(7), st.uint8(99), st.uint8(141), st.uint8(1), st.uint8(8), st.uint8(240), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(2), st.uint8(8), st.uint8(1), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(7), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(26), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(112), st.uint8(97), st.uint8(114), st.uint8(101), st.uint8(110), st.uint8(116), st.uint8(95), st.uint8(118), st.uint8(97), st.uint8(115), st.uint8(112), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(5), st.uint8(6), st.uint8(16), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(7), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(7), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(11), st.uint8(3), st.uint8(11), st.uint8(4), st.uint8(11), st.uint8(5), st.uint8(10), st.uint8(6), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(7), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[
            TransactionArgument__Address(new_account_address),
            TransactionArgument__U8Vector(auth_key_prefix),
            TransactionArgument__U8Vector(human_name),
            TransactionArgument__U8Vector(base_url),
            TransactionArgument__U8Vector(compliance_public_key),
            TransactionArgument__Bool(add_all_currencies),
        ],
    )


def encode_create_recovery_address_script() -> Script:
    """Extract the `KeyRotationCapability` for `recovery_account` and publish it in a `RecoveryAddress` resource under `recovery_account`.

    Aborts if `recovery_account` has delegated its `KeyRotationCapability`, already has a
    `RecoveryAddress` resource, or is not a VASP.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(4), st.uint8(7), st.uint8(11), st.uint8(24), st.uint8(8), st.uint8(35), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(0), st.uint8(15), st.uint8(82), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(118), st.uint8(101), st.uint8(114), st.uint8(121), st.uint8(65), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(7), st.uint8(112), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(115), st.uint8(104), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[],
    )


def encode_create_validator_account_script(
    new_account_address: AccountAddress, auth_key_prefix: typing.Sequence[st.uint8]
) -> Script:
    """Create a validator account at `new_validator_address` with `auth_key_prefix`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(17), st.uint8(4), st.uint8(30), st.uint8(4), st.uint8(5), st.uint8(34), st.uint8(45), st.uint8(7), st.uint8(79), st.uint8(139), st.uint8(1), st.uint8(8), st.uint8(218), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(24), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(118), st.uint8(97), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(3), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__Address(new_account_address), TransactionArgument__U8Vector(auth_key_prefix)],
    )


def encode_empty_script_script() -> Script:
    """Used for testing."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[],
    )


def encode_freeze_account_script(sliding_nonce: st.uint64, to_freeze_account: AccountAddress) -> Script:
    """Freeze account `address`.

    Initiator must be authorized. `sliding_nonce` is a unique nonce for operation, see
    sliding_nonce.move for details.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(2), st.uint8(6), st.uint8(9), st.uint8(3), st.uint8(15), st.uint8(22), st.uint8(4), st.uint8(37), st.uint8(4), st.uint8(5), st.uint8(41), st.uint8(46), st.uint8(7), st.uint8(87), st.uint8(160), st.uint8(1), st.uint8(8), st.uint8(247), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(5), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(15), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(70), st.uint8(114), st.uint8(101), st.uint8(101), st.uint8(122), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(14), st.uint8(102), st.uint8(114), st.uint8(101), st.uint8(101), st.uint8(122), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(7), st.uint8(14), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(17), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(sliding_nonce), TransactionArgument__Address(to_freeze_account)],
    )


def encode_mint_script(
    token: TypeTag, payee: AccountAddress, auth_key_prefix: typing.Sequence[st.uint8], amount: st.uint64
) -> Script:
    """Create `amount` coins for `payee`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(2), st.uint8(6), st.uint8(9), st.uint8(3), st.uint8(15), st.uint8(40), st.uint8(4), st.uint8(55), st.uint8(10), st.uint8(5), st.uint8(65), st.uint8(58), st.uint8(7), st.uint8(123), st.uint8(194), st.uint8(1), st.uint8(8), st.uint8(189), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(7), st.uint8(3), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(5), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(6), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(10), st.uint8(7), st.uint8(3), st.uint8(0), st.uint8(1), st.uint8(11), st.uint8(7), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(3), st.uint8(11), st.uint8(2), st.uint8(11), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(10), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(3), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(3), st.uint8(76), st.uint8(66), st.uint8(82), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(6), st.uint8(105), st.uint8(115), st.uint8(95), st.uint8(108), st.uint8(98), st.uint8(114), st.uint8(22), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(110), st.uint8(101), st.uint8(116), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(9), st.uint8(101), st.uint8(120), st.uint8(105), st.uint8(115), st.uint8(116), st.uint8(115), st.uint8(95), st.uint8(97), st.uint8(116), st.uint8(19), st.uint8(109), st.uint8(105), st.uint8(110), st.uint8(116), st.uint8(95), st.uint8(108), st.uint8(98), st.uint8(114), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(15), st.uint8(109), st.uint8(105), st.uint8(110), st.uint8(116), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(9), st.uint8(29), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(4), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(4), st.uint8(32), st.uint8(3), st.uint8(8), st.uint8(5), st.uint8(13), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(56), st.uint8(1), st.uint8(56), st.uint8(2), st.uint8(3), st.uint8(16), st.uint8(5), st.uint8(21), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(10), st.uint8(3), st.uint8(17), st.uint8(5), st.uint8(5), st.uint8(25), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(10), st.uint8(3), st.uint8(56), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(4), st.uint8(56), st.uint8(4), st.uint8(2)],
        # fmt: on
        ty_args=[token],
        args=[
            TransactionArgument__Address(payee),
            TransactionArgument__U8Vector(auth_key_prefix),
            TransactionArgument__U64(amount),
        ],
    )


def encode_mint_lbr_script(amount_lbr: st.uint64) -> Script:
    """Mint `amount_lbr` LBR from the sending account's constituent coins and deposits the resulting LBR into the sending account."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(12), st.uint8(2), st.uint8(12), st.uint8(21), st.uint8(3), st.uint8(33), st.uint8(38), st.uint8(4), st.uint8(71), st.uint8(14), st.uint8(5), st.uint8(85), st.uint8(102), st.uint8(7), st.uint8(187), st.uint8(1), st.uint8(168), st.uint8(1), st.uint8(8), st.uint8(227), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(0), st.uint8(4), st.uint8(0), st.uint8(5), st.uint8(3), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(8), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(7), st.uint8(2), st.uint8(3), st.uint8(0), st.uint8(4), st.uint8(9), st.uint8(1), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(10), st.uint8(5), st.uint8(6), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(7), st.uint8(0), st.uint8(4), st.uint8(12), st.uint8(7), st.uint8(6), st.uint8(0), st.uint8(4), st.uint8(13), st.uint8(8), st.uint8(9), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(12), st.uint8(2), st.uint8(13), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(13), st.uint8(3), st.uint8(14), st.uint8(3), st.uint8(12), st.uint8(3), st.uint8(13), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(4), st.uint8(2), st.uint8(6), st.uint8(8), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(9), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(5), st.uint8(8), st.uint8(4), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(5), st.uint8(67), st.uint8(111), st.uint8(105), st.uint8(110), st.uint8(49), st.uint8(5), st.uint8(67), st.uint8(111), st.uint8(105), st.uint8(110), st.uint8(50), st.uint8(3), st.uint8(76), st.uint8(66), st.uint8(82), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(6), st.uint8(83), st.uint8(105), st.uint8(103), st.uint8(110), st.uint8(101), st.uint8(114), st.uint8(10), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(95), st.uint8(111), st.uint8(102), st.uint8(6), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(18), st.uint8(87), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(7), st.uint8(98), st.uint8(97), st.uint8(108), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(100), st.uint8(101), st.uint8(112), st.uint8(111), st.uint8(115), st.uint8(105), st.uint8(116), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(27), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(27), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(13), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(11), st.uint8(39), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(0), st.uint8(12), st.uint8(9), st.uint8(10), st.uint8(9), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(4), st.uint8(10), st.uint8(9), st.uint8(56), st.uint8(1), st.uint8(12), st.uint8(7), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(4), st.uint8(12), st.uint8(10), st.uint8(14), st.uint8(10), st.uint8(10), st.uint8(4), st.uint8(56), st.uint8(2), st.uint8(12), st.uint8(2), st.uint8(14), st.uint8(10), st.uint8(10), st.uint8(7), st.uint8(56), st.uint8(3), st.uint8(12), st.uint8(5), st.uint8(11), st.uint8(10), st.uint8(17), st.uint8(5), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(11), st.uint8(5), st.uint8(17), st.uint8(1), st.uint8(12), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(12), st.uint8(8), st.uint8(10), st.uint8(0), st.uint8(11), st.uint8(8), st.uint8(56), st.uint8(4), st.uint8(10), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(5), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(6), st.uint8(56), st.uint8(6), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(amount_lbr)],
    )


def encode_modify_publishing_option_script(args: typing.Sequence[st.uint8]) -> Script:
    """Modify publishing options.

    Takes the LCS bytes of a `VMPublishingOption` object as input.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(6), st.uint8(7), st.uint8(13), st.uint8(36), st.uint8(8), st.uint8(49), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(13), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(86), st.uint8(77), st.uint8(67), st.uint8(111), st.uint8(110), st.uint8(102), st.uint8(105), st.uint8(103), st.uint8(21), st.uint8(115), st.uint8(101), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(115), st.uint8(104), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(95), st.uint8(111), st.uint8(112), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(args)],
    )


def encode_peer_to_peer_with_metadata_script(
    token: TypeTag,
    payee: AccountAddress,
    amount: st.uint64,
    metadata: typing.Sequence[st.uint8],
    metadata_signature: typing.Sequence[st.uint8],
) -> Script:
    """Transfer `amount` coins to `recipient_address` with (optional) associated metadata `metadata` and (optional) `signature` on the metadata, amount, and sender address.

    The `metadata` and `signature` parameters are only required if `amount` >= 1_000_000
    micro LBR and the sender and recipient of the funds are two distinct VASPs. Fails if
    there is no account at the recipient address or if the sender's balance is lower than
    `amount`.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(2), st.uint8(4), st.uint8(3), st.uint8(6), st.uint8(16), st.uint8(4), st.uint8(22), st.uint8(2), st.uint8(5), st.uint8(24), st.uint8(29), st.uint8(7), st.uint8(53), st.uint8(111), st.uint8(8), st.uint8(164), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(3), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(18), st.uint8(87), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(27), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(112), st.uint8(97), st.uint8(121), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(95), st.uint8(109), st.uint8(101), st.uint8(116), st.uint8(97), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(97), st.uint8(27), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(1), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(17), st.uint8(0), st.uint8(12), st.uint8(5), st.uint8(14), st.uint8(5), st.uint8(10), st.uint8(1), st.uint8(10), st.uint8(2), st.uint8(11), st.uint8(3), st.uint8(11), st.uint8(4), st.uint8(56), st.uint8(0), st.uint8(11), st.uint8(5), st.uint8(17), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[token],
        args=[
            TransactionArgument__Address(payee),
            TransactionArgument__U64(amount),
            TransactionArgument__U8Vector(metadata),
            TransactionArgument__U8Vector(metadata_signature),
        ],
    )


def encode_preburn_script(token: TypeTag, amount: st.uint64) -> Script:
    """Preburn `amount` `Token`s from `account`.

    This will only succeed if `account` already has a published `Preburn<Token>` resource.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(22), st.uint8(4), st.uint8(35), st.uint8(4), st.uint8(5), st.uint8(39), st.uint8(33), st.uint8(7), st.uint8(72), st.uint8(119), st.uint8(8), st.uint8(191), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(2), st.uint8(3), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(4), st.uint8(5), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(7), st.uint8(0), st.uint8(7), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(2), st.uint8(6), st.uint8(8), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(10), st.uint8(112), st.uint8(114), st.uint8(101), st.uint8(98), st.uint8(117), st.uint8(114), st.uint8(110), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(18), st.uint8(87), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(27), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(27), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(13), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(6), st.uint8(3), st.uint8(11), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(1), st.uint8(12), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(14), st.uint8(2), st.uint8(10), st.uint8(1), st.uint8(56), st.uint8(0), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(17), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[token],
        args=[TransactionArgument__U64(amount)],
    )


def encode_publish_shared_ed25519_public_key_script(public_key: typing.Sequence[st.uint8]) -> Script:
    """(1) Rotate the authentication key of the sender to `public_key` (2) Publish a resource containing a 32-byte ed25519 public key and the rotation capability of the sender under the sender's address.

    Aborts if the sender already has a `SharedEd25519PublicKey` resource. Aborts if the
    length of `new_public_key` is not 32.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(6), st.uint8(7), st.uint8(13), st.uint8(31), st.uint8(8), st.uint8(44), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(22), st.uint8(83), st.uint8(104), st.uint8(97), st.uint8(114), st.uint8(101), st.uint8(100), st.uint8(69), st.uint8(100), st.uint8(50), st.uint8(53), st.uint8(53), st.uint8(49), st.uint8(57), st.uint8(80), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(99), st.uint8(75), st.uint8(101), st.uint8(121), st.uint8(7), st.uint8(112), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(115), st.uint8(104), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(public_key)],
    )


def encode_reconfigure_script() -> Script:
    """Update configs of all the validators and emit reconfiguration event."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(17), st.uint8(4), st.uint8(30), st.uint8(4), st.uint8(5), st.uint8(34), st.uint8(34), st.uint8(7), st.uint8(68), st.uint8(136), st.uint8(1), st.uint8(8), st.uint8(204), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(6), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(11), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(83), st.uint8(121), st.uint8(115), st.uint8(116), st.uint8(101), st.uint8(109), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(22), st.uint8(117), st.uint8(112), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(110), st.uint8(100), st.uint8(95), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(110), st.uint8(102), st.uint8(105), st.uint8(103), st.uint8(117), st.uint8(114), st.uint8(101), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(5), st.uint8(9), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(1), st.uint8(14), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[],
    )


def encode_remove_validator_script(validator_address: AccountAddress) -> Script:
    """Adding `to_remove` to the set of pending validator removals.

    Fails if the `to_remove` address is already in the validator set or already in the
    pending removals. Callable by Validator's operator.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(17), st.uint8(4), st.uint8(30), st.uint8(4), st.uint8(5), st.uint8(34), st.uint8(39), st.uint8(7), st.uint8(73), st.uint8(130), st.uint8(1), st.uint8(8), st.uint8(203), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(5), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(11), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(83), st.uint8(121), st.uint8(115), st.uint8(116), st.uint8(101), st.uint8(109), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(19), st.uint8(65), st.uint8(115), st.uint8(115), st.uint8(111), st.uint8(99), st.uint8(105), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(82), st.uint8(111), st.uint8(111), st.uint8(116), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(16), st.uint8(114), st.uint8(101), st.uint8(109), st.uint8(111), st.uint8(118), st.uint8(101), st.uint8(95), st.uint8(118), st.uint8(97), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(10), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(2), st.uint8(14), st.uint8(2), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(2), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__Address(validator_address)],
    )


def encode_rotate_authentication_key_script(new_key: typing.Sequence[st.uint8]) -> Script:
    """Rotate the sender's authentication key to `new_key`.

    `new_key` should be a 256 bit sha3 hash of an ed25519 public key.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(2), st.uint8(4), st.uint8(3), st.uint8(6), st.uint8(15), st.uint8(5), st.uint8(21), st.uint8(18), st.uint8(7), st.uint8(39), st.uint8(125), st.uint8(8), st.uint8(164), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(3), st.uint8(1), st.uint8(2), st.uint8(0), st.uint8(0), st.uint8(4), st.uint8(3), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(8), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(21), st.uint8(75), st.uint8(101), st.uint8(121), st.uint8(82), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(95), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(95), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(25), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(117), st.uint8(116), st.uint8(104), st.uint8(101), st.uint8(110), st.uint8(116), st.uint8(105), st.uint8(99), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(1), st.uint8(9), st.uint8(11), st.uint8(0), st.uint8(17), st.uint8(0), st.uint8(12), st.uint8(2), st.uint8(14), st.uint8(2), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(2), st.uint8(17), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(new_key)],
    )


def encode_rotate_authentication_key_with_nonce_script(
    sliding_nonce: st.uint64, new_key: typing.Sequence[st.uint8]
) -> Script:
    """Rotate the sender's authentication key to `new_key`.

    `new_key` should be a 256 bit sha3 hash of an ed25519 public key. This script also
    takes `sliding_nonce`, as a unique nonce for this operation. See sliding_nonce.move
    for details.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(4), st.uint8(3), st.uint8(8), st.uint8(20), st.uint8(5), st.uint8(28), st.uint8(23), st.uint8(7), st.uint8(51), st.uint8(160), st.uint8(1), st.uint8(8), st.uint8(211), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(5), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(8), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(8), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(21), st.uint8(75), st.uint8(101), st.uint8(121), st.uint8(82), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(95), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(95), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(25), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(117), st.uint8(116), st.uint8(104), st.uint8(101), st.uint8(110), st.uint8(116), st.uint8(105), st.uint8(99), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(3), st.uint8(12), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(11), st.uint8(0), st.uint8(17), st.uint8(1), st.uint8(12), st.uint8(3), st.uint8(14), st.uint8(3), st.uint8(11), st.uint8(2), st.uint8(17), st.uint8(3), st.uint8(11), st.uint8(3), st.uint8(17), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(sliding_nonce), TransactionArgument__U8Vector(new_key)],
    )


def encode_rotate_authentication_key_with_recovery_address_script(
    recovery_address: AccountAddress, to_recover: AccountAddress, new_key: typing.Sequence[st.uint8]
) -> Script:
    """Rotate the authentication key of `to_recover` to `new_key`.

    Can be invoked by either `recovery_address` or `to_recover`. Aborts if
    `recovery_address` does not have the `KeyRotationCapability` for `to_recover`.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(8), st.uint8(7), st.uint8(15), st.uint8(42), st.uint8(8), st.uint8(57), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(15), st.uint8(82), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(118), st.uint8(101), st.uint8(114), st.uint8(121), st.uint8(65), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(25), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(117), st.uint8(116), st.uint8(104), st.uint8(101), st.uint8(110), st.uint8(116), st.uint8(105), st.uint8(99), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(10), st.uint8(2), st.uint8(11), st.uint8(3), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[
            TransactionArgument__Address(recovery_address),
            TransactionArgument__Address(to_recover),
            TransactionArgument__U8Vector(new_key),
        ],
    )


def encode_rotate_base_url_script(new_url: typing.Sequence[st.uint8]) -> Script:
    """Rotate `vasp_root_addr`'s base URL to `new_url`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(6), st.uint8(7), st.uint8(13), st.uint8(21), st.uint8(8), st.uint8(34), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(4), st.uint8(86), st.uint8(65), st.uint8(83), st.uint8(80), st.uint8(15), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(98), st.uint8(97), st.uint8(115), st.uint8(101), st.uint8(95), st.uint8(117), st.uint8(114), st.uint8(108), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(new_url)],
    )


def encode_rotate_compliance_public_key_script(new_key: typing.Sequence[st.uint8]) -> Script:
    """Encode a program that rotates `vasp_root_addr`'s compliance public key to `new_key`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(6), st.uint8(7), st.uint8(13), st.uint8(34), st.uint8(8), st.uint8(47), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(4), st.uint8(86), st.uint8(65), st.uint8(83), st.uint8(80), st.uint8(28), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(112), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(99), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(new_key)],
    )


def encode_rotate_shared_ed25519_public_key_script(public_key: typing.Sequence[st.uint8]) -> Script:
    """(1) Rotate the public key stored in `account`'s `SharedEd25519PublicKey` resource to `new_public_key` (2) Rotate the authentication key using the capability stored in `account`'s `SharedEd25519PublicKey` to a new value derived from `new_public_key` Aborts if `account` does not have a `SharedEd25519PublicKey` resource.

    Aborts if the length of `new_public_key` is not 32.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(6), st.uint8(7), st.uint8(13), st.uint8(34), st.uint8(8), st.uint8(47), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(22), st.uint8(83), st.uint8(104), st.uint8(97), st.uint8(114), st.uint8(101), st.uint8(100), st.uint8(69), st.uint8(100), st.uint8(50), st.uint8(53), st.uint8(53), st.uint8(49), st.uint8(57), st.uint8(80), st.uint8(117), st.uint8(98), st.uint8(108), st.uint8(105), st.uint8(99), st.uint8(75), st.uint8(101), st.uint8(121), st.uint8(10), st.uint8(114), st.uint8(111), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(107), st.uint8(101), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U8Vector(public_key)],
    )


def encode_set_validator_config_script(
    validator_account: AccountAddress,
    consensus_pubkey: typing.Sequence[st.uint8],
    validator_network_identity_pubkey: typing.Sequence[st.uint8],
    validator_network_address: typing.Sequence[st.uint8],
    fullnodes_network_identity_pubkey: typing.Sequence[st.uint8],
    fullnodes_network_address: typing.Sequence[st.uint8],
) -> Script:
    """Set validator's config."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(15), st.uint8(7), st.uint8(22), st.uint8(27), st.uint8(8), st.uint8(49), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(0), st.uint8(15), st.uint8(86), st.uint8(97), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(67), st.uint8(111), st.uint8(110), st.uint8(102), st.uint8(105), st.uint8(103), st.uint8(10), st.uint8(115), st.uint8(101), st.uint8(116), st.uint8(95), st.uint8(99), st.uint8(111), st.uint8(110), st.uint8(102), st.uint8(105), st.uint8(103), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(11), st.uint8(3), st.uint8(11), st.uint8(4), st.uint8(11), st.uint8(5), st.uint8(11), st.uint8(6), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[
            TransactionArgument__Address(validator_account),
            TransactionArgument__U8Vector(consensus_pubkey),
            TransactionArgument__U8Vector(validator_network_identity_pubkey),
            TransactionArgument__U8Vector(validator_network_address),
            TransactionArgument__U8Vector(fullnodes_network_identity_pubkey),
            TransactionArgument__U8Vector(fullnodes_network_address),
        ],
    )


def encode_tiered_mint_script(
    coin_type: TypeTag,
    sliding_nonce: st.uint64,
    designated_dealer_address: AccountAddress,
    mint_amount: st.uint64,
    tier_index: st.uint64,
) -> Script:
    """Mint 'mint_amount' to 'designated_dealer_address' for 'tier_index' tier.

    Max valid tier index is 3 since there are max 4 tiers per DD. Sender should be
    treasury compliance account and receiver authorized DD. `sliding_nonce` is a unique
    nonce for operation, see sliding_nonce.move for details.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(14), st.uint8(3), st.uint8(24), st.uint8(29), st.uint8(4), st.uint8(53), st.uint8(8), st.uint8(5), st.uint8(61), st.uint8(73), st.uint8(7), st.uint8(134), st.uint8(1), st.uint8(195), st.uint8(1), st.uint8(8), st.uint8(201), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(0), st.uint8(4), st.uint8(3), st.uint8(5), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(7), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(3), st.uint8(8), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(9), st.uint8(4), st.uint8(5), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(10), st.uint8(6), st.uint8(3), st.uint8(0), st.uint8(2), st.uint8(11), st.uint8(7), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(11), st.uint8(1), st.uint8(10), st.uint8(4), st.uint8(11), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(3), st.uint8(5), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(2), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(5), st.uint8(11), st.uint8(2), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(5), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(5), st.uint8(3), st.uint8(3), st.uint8(2), st.uint8(11), st.uint8(2), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(16), st.uint8(68), st.uint8(101), st.uint8(115), st.uint8(105), st.uint8(103), st.uint8(110), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(100), st.uint8(68), st.uint8(101), st.uint8(97), st.uint8(108), st.uint8(101), st.uint8(114), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(11), st.uint8(116), st.uint8(105), st.uint8(101), st.uint8(114), st.uint8(101), st.uint8(100), st.uint8(95), st.uint8(109), st.uint8(105), st.uint8(110), st.uint8(116), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(7), st.uint8(100), st.uint8(101), st.uint8(112), st.uint8(111), st.uint8(115), st.uint8(105), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(9), st.uint8(21), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(6), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(6), st.uint8(10), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(4), st.uint8(56), st.uint8(1), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(0), st.uint8(11), st.uint8(6), st.uint8(56), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(11), st.uint8(5), st.uint8(56), st.uint8(3), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[
            TransactionArgument__U64(sliding_nonce),
            TransactionArgument__Address(designated_dealer_address),
            TransactionArgument__U64(mint_amount),
            TransactionArgument__U64(tier_index),
        ],
    )


def encode_unfreeze_account_script(sliding_nonce: st.uint64, to_unfreeze_account: AccountAddress) -> Script:
    """Unfreeze account `address`.

    Initiator must be authorized. `sliding_nonce` is a unique nonce for operation, see
    sliding_nonce.move for details.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(2), st.uint8(6), st.uint8(9), st.uint8(3), st.uint8(15), st.uint8(22), st.uint8(4), st.uint8(37), st.uint8(4), st.uint8(5), st.uint8(41), st.uint8(46), st.uint8(7), st.uint8(87), st.uint8(164), st.uint8(1), st.uint8(8), st.uint8(251), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(5), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(17), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(85), st.uint8(110), st.uint8(102), st.uint8(114), st.uint8(101), st.uint8(101), st.uint8(122), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(16), st.uint8(117), st.uint8(110), st.uint8(102), st.uint8(114), st.uint8(101), st.uint8(101), st.uint8(122), st.uint8(101), st.uint8(95), st.uint8(97), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(7), st.uint8(14), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(2), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(14), st.uint8(3), st.uint8(10), st.uint8(2), st.uint8(17), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(sliding_nonce), TransactionArgument__Address(to_unfreeze_account)],
    )


def encode_unmint_lbr_script(amount_lbr: st.uint64) -> Script:
    """Unmints `amount_lbr` LBR from the sending account into the constituent coins and deposits the resulting coins into the sending account.

    "
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(21), st.uint8(3), st.uint8(31), st.uint8(27), st.uint8(4), st.uint8(58), st.uint8(6), st.uint8(5), st.uint8(64), st.uint8(76), st.uint8(7), st.uint8(140), st.uint8(1), st.uint8(142), st.uint8(1), st.uint8(8), st.uint8(154), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(0), st.uint8(4), st.uint8(3), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(0), st.uint8(2), st.uint8(2), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(6), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(7), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(8), st.uint8(4), st.uint8(5), st.uint8(0), st.uint8(4), st.uint8(9), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(4), st.uint8(10), st.uint8(6), st.uint8(7), st.uint8(1), st.uint8(1), st.uint8(4), st.uint8(10), st.uint8(1), st.uint8(11), st.uint8(1), st.uint8(12), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(8), st.uint8(4), st.uint8(2), st.uint8(6), st.uint8(8), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(8), st.uint8(4), st.uint8(1), st.uint8(8), st.uint8(3), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(5), st.uint8(67), st.uint8(111), st.uint8(105), st.uint8(110), st.uint8(49), st.uint8(5), st.uint8(67), st.uint8(111), st.uint8(105), st.uint8(110), st.uint8(50), st.uint8(3), st.uint8(76), st.uint8(66), st.uint8(82), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(6), st.uint8(117), st.uint8(110), st.uint8(112), st.uint8(97), st.uint8(99), st.uint8(107), st.uint8(18), st.uint8(87), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(10), st.uint8(100), st.uint8(101), st.uint8(112), st.uint8(111), st.uint8(115), st.uint8(105), st.uint8(116), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(27), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(27), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(13), st.uint8(119), st.uint8(105), st.uint8(116), st.uint8(104), st.uint8(100), st.uint8(114), st.uint8(97), st.uint8(119), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(8), st.uint8(9), st.uint8(21), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(12), st.uint8(5), st.uint8(14), st.uint8(5), st.uint8(10), st.uint8(1), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(4), st.uint8(11), st.uint8(5), st.uint8(17), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(11), st.uint8(4), st.uint8(17), st.uint8(0), st.uint8(12), st.uint8(3), st.uint8(12), st.uint8(2), st.uint8(10), st.uint8(0), st.uint8(11), st.uint8(2), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(amount_lbr)],
    )


def encode_update_exchange_rate_script(
    currency: TypeTag,
    sliding_nonce: st.uint64,
    new_exchange_rate_denominator: st.uint64,
    new_exchange_rate_numerator: st.uint64,
) -> Script:
    """Update the on-chain exchange rate to LBR for the given `currency` to be given by `new_exchange_rate_denominator/new_exchange_rate_numerator`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(8), st.uint8(2), st.uint8(8), st.uint8(13), st.uint8(3), st.uint8(21), st.uint8(28), st.uint8(4), st.uint8(49), st.uint8(6), st.uint8(5), st.uint8(55), st.uint8(57), st.uint8(7), st.uint8(112), st.uint8(204), st.uint8(1), st.uint8(8), st.uint8(188), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(2), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(7), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(8), st.uint8(4), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(6), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(10), st.uint8(7), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(10), st.uint8(3), st.uint8(11), st.uint8(1), st.uint8(10), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(3), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(2), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(8), st.uint8(2), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(3), st.uint8(2), st.uint8(8), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(12), st.uint8(70), st.uint8(105), st.uint8(120), st.uint8(101), st.uint8(100), st.uint8(80), st.uint8(111), st.uint8(105), st.uint8(110), st.uint8(116), st.uint8(51), st.uint8(50), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(20), st.uint8(99), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(102), st.uint8(114), st.uint8(111), st.uint8(109), st.uint8(95), st.uint8(114), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(97), st.uint8(108), st.uint8(24), st.uint8(117), st.uint8(112), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(108), st.uint8(98), st.uint8(114), st.uint8(95), st.uint8(101), st.uint8(120), st.uint8(99), st.uint8(104), st.uint8(97), st.uint8(110), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(114), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(9), st.uint8(17), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(4), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(5), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(3), st.uint8(17), st.uint8(2), st.uint8(12), st.uint8(4), st.uint8(14), st.uint8(5), st.uint8(11), st.uint8(4), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(5), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[currency],
        args=[
            TransactionArgument__U64(sliding_nonce),
            TransactionArgument__U64(new_exchange_rate_denominator),
            TransactionArgument__U64(new_exchange_rate_numerator),
        ],
    )


def encode_update_libra_version_script(major: st.uint64) -> Script:
    """Update Libra version."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(5), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(3), st.uint8(2), st.uint8(5), st.uint8(5), st.uint8(7), st.uint8(5), st.uint8(7), st.uint8(12), st.uint8(17), st.uint8(8), st.uint8(29), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(0), st.uint8(12), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(86), st.uint8(101), st.uint8(114), st.uint8(115), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(3), st.uint8(115), st.uint8(101), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(11), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(0), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(major)],
    )


def encode_update_minting_ability_script(currency: TypeTag, allow_minting: st.bool) -> Script:
    """Allows--true--or disallows--false--minting of `currency` based upon `allow_minting`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(4), st.uint8(2), st.uint8(4), st.uint8(9), st.uint8(3), st.uint8(13), st.uint8(18), st.uint8(4), st.uint8(31), st.uint8(6), st.uint8(5), st.uint8(37), st.uint8(42), st.uint8(7), st.uint8(79), st.uint8(133), st.uint8(1), st.uint8(8), st.uint8(212), st.uint8(1), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(4), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(5), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(6), st.uint8(4), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(2), st.uint8(8), st.uint8(1), st.uint8(7), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(5), st.uint8(76), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(22), st.uint8(117), st.uint8(112), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(109), st.uint8(105), st.uint8(110), st.uint8(116), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(5), st.uint8(6), st.uint8(10), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(2), st.uint8(14), st.uint8(2), st.uint8(10), st.uint8(1), st.uint8(56), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(2), st.uint8(56), st.uint8(2), st.uint8(2)],
        # fmt: on
        ty_args=[currency],
        args=[TransactionArgument__Bool(allow_minting)],
    )


def encode_update_travel_rule_limit_script(sliding_nonce: st.uint64, new_micro_lbr_limit: st.uint64) -> Script:
    """Update the travel rule limit to `new_micro_lbr_limit`."""
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(8), st.uint8(2), st.uint8(8), st.uint8(9), st.uint8(3), st.uint8(17), st.uint8(27), st.uint8(4), st.uint8(44), st.uint8(4), st.uint8(5), st.uint8(48), st.uint8(47), st.uint8(7), st.uint8(95), st.uint8(207), st.uint8(1), st.uint8(8), st.uint8(174), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(0), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(8), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(6), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(2), st.uint8(7), st.uint8(0), st.uint8(4), st.uint8(0), st.uint8(0), st.uint8(9), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(3), st.uint8(10), st.uint8(6), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(9), st.uint8(1), st.uint8(9), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(5), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(20), st.uint8(68), st.uint8(117), st.uint8(97), st.uint8(108), st.uint8(65), st.uint8(116), st.uint8(116), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(76), st.uint8(105), st.uint8(109), st.uint8(105), st.uint8(116), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(6), st.uint8(83), st.uint8(105), st.uint8(103), st.uint8(110), st.uint8(101), st.uint8(114), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(10), st.uint8(97), st.uint8(100), st.uint8(100), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(115), st.uint8(95), st.uint8(111), st.uint8(102), st.uint8(30), st.uint8(85), st.uint8(112), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(68), st.uint8(117), st.uint8(97), st.uint8(108), st.uint8(65), st.uint8(116), st.uint8(116), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(97), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(84), st.uint8(104), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(104), st.uint8(111), st.uint8(108), st.uint8(100), st.uint8(20), st.uint8(115), st.uint8(101), st.uint8(116), st.uint8(95), st.uint8(109), st.uint8(105), st.uint8(99), st.uint8(114), st.uint8(111), st.uint8(108), st.uint8(105), st.uint8(98), st.uint8(114), st.uint8(97), st.uint8(95), st.uint8(108), st.uint8(105), st.uint8(109), st.uint8(105), st.uint8(116), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(8), st.uint8(15), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(4), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(3), st.uint8(14), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(17), st.uint8(2), st.uint8(10), st.uint8(2), st.uint8(17), st.uint8(3), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(3), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[],
        args=[TransactionArgument__U64(sliding_nonce), TransactionArgument__U64(new_micro_lbr_limit)],
    )


def encode_update_unhosted_wallet_limits_script(
    coin_type: TypeTag, sliding_nonce: st.uint64, new_max_total_flow: st.uint64, new_max_holding_balance: st.uint64
) -> Script:
    """Optionally update global thresholds of max balance, total flow (inflow + outflow) (microLBR) for `LimitsDefinition` bound accounts.

    If a new threshold is 0, that particular config does not get updated. `sliding_nonce`
    is a unique nonce for operation, see sliding_nonce.move for details.
    """
    return Script(
        # fmt: off
        code=[st.uint8(161), st.uint8(28), st.uint8(235), st.uint8(11), st.uint8(1), st.uint8(0), st.uint8(7), st.uint8(1), st.uint8(0), st.uint8(6), st.uint8(2), st.uint8(6), st.uint8(9), st.uint8(3), st.uint8(15), st.uint8(22), st.uint8(4), st.uint8(37), st.uint8(4), st.uint8(5), st.uint8(41), st.uint8(46), st.uint8(7), st.uint8(87), st.uint8(178), st.uint8(1), st.uint8(8), st.uint8(137), st.uint8(2), st.uint8(16), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(0), st.uint8(2), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(4), st.uint8(1), st.uint8(0), st.uint8(1), st.uint8(5), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(3), st.uint8(1), st.uint8(6), st.uint8(2), st.uint8(3), st.uint8(1), st.uint8(3), st.uint8(0), st.uint8(7), st.uint8(4), st.uint8(3), st.uint8(0), st.uint8(2), st.uint8(8), st.uint8(5), st.uint8(3), st.uint8(0), st.uint8(0), st.uint8(8), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(6), st.uint8(12), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(9), st.uint8(0), st.uint8(0), st.uint8(3), st.uint8(6), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(3), st.uint8(3), st.uint8(2), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(4), st.uint8(6), st.uint8(12), st.uint8(3), st.uint8(3), st.uint8(3), st.uint8(1), st.uint8(11), st.uint8(0), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(1), st.uint8(8), st.uint8(1), st.uint8(13), st.uint8(65), st.uint8(99), st.uint8(99), st.uint8(111), st.uint8(117), st.uint8(110), st.uint8(116), st.uint8(76), st.uint8(105), st.uint8(109), st.uint8(105), st.uint8(116), st.uint8(115), st.uint8(5), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(115), st.uint8(12), st.uint8(83), st.uint8(108), st.uint8(105), st.uint8(100), st.uint8(105), st.uint8(110), st.uint8(103), st.uint8(78), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(10), st.uint8(67), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(22), st.uint8(84), st.uint8(114), st.uint8(101), st.uint8(97), st.uint8(115), st.uint8(117), st.uint8(114), st.uint8(121), st.uint8(67), st.uint8(111), st.uint8(109), st.uint8(112), st.uint8(108), st.uint8(105), st.uint8(97), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(82), st.uint8(111), st.uint8(108), st.uint8(101), st.uint8(31), st.uint8(101), st.uint8(120), st.uint8(116), st.uint8(114), st.uint8(97), st.uint8(99), st.uint8(116), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(31), st.uint8(114), st.uint8(101), st.uint8(115), st.uint8(116), st.uint8(111), st.uint8(114), st.uint8(101), st.uint8(95), st.uint8(99), st.uint8(97), st.uint8(112), st.uint8(97), st.uint8(98), st.uint8(105), st.uint8(108), st.uint8(105), st.uint8(116), st.uint8(121), st.uint8(95), st.uint8(116), st.uint8(111), st.uint8(95), st.uint8(112), st.uint8(114), st.uint8(105), st.uint8(118), st.uint8(105), st.uint8(108), st.uint8(101), st.uint8(103), st.uint8(101), st.uint8(24), st.uint8(117), st.uint8(112), st.uint8(100), st.uint8(97), st.uint8(116), st.uint8(101), st.uint8(95), st.uint8(108), st.uint8(105), st.uint8(109), st.uint8(105), st.uint8(116), st.uint8(115), st.uint8(95), st.uint8(100), st.uint8(101), st.uint8(102), st.uint8(105), st.uint8(110), st.uint8(105), st.uint8(116), st.uint8(105), st.uint8(111), st.uint8(110), st.uint8(21), st.uint8(114), st.uint8(101), st.uint8(99), st.uint8(111), st.uint8(114), st.uint8(100), st.uint8(95), st.uint8(110), st.uint8(111), st.uint8(110), st.uint8(99), st.uint8(101), st.uint8(95), st.uint8(111), st.uint8(114), st.uint8(95), st.uint8(97), st.uint8(98), st.uint8(111), st.uint8(114), st.uint8(116), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(0), st.uint8(1), st.uint8(1), st.uint8(1), st.uint8(6), st.uint8(7), st.uint8(14), st.uint8(10), st.uint8(0), st.uint8(10), st.uint8(1), st.uint8(17), st.uint8(3), st.uint8(10), st.uint8(0), st.uint8(56), st.uint8(0), st.uint8(12), st.uint8(4), st.uint8(14), st.uint8(4), st.uint8(10), st.uint8(2), st.uint8(10), st.uint8(3), st.uint8(17), st.uint8(2), st.uint8(11), st.uint8(0), st.uint8(11), st.uint8(4), st.uint8(56), st.uint8(1), st.uint8(2)],
        # fmt: on
        ty_args=[coin_type],
        args=[
            TransactionArgument__U64(sliding_nonce),
            TransactionArgument__U64(new_max_total_flow),
            TransactionArgument__U64(new_max_holding_balance),
        ],
    )
