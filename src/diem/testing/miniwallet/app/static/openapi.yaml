openapi: 3.0.3
info:
  title: Diem MiniWallet API Specification
  description: >
      The Diem MiniWallet API has been designed as a minimum wallet application API
      to test other wallet apps by playing as the counterparty app. You can add any 
      new API to suit your testing purposes to the implementation of the 
      Diem MiniWallet API.


      **Enable the Diem MiniWallet Test Suite**
      The Diem MiniWallet Test Suite is a set of tests built on top of the 
      Diem MiniWallet API and is used to validate a wallet app’s integration with the 
      Diem Payment Network (DPN). To enable the Diem MiniWallet Test Suite for your 
      wallet app, create a Diem MiniWallet API proxy to your wallet app with the following 
      endpoints:

      * (Minimum Required) To test sending and receiving payments on-chain: 
            * [Create account endpoint](#post-/accounts): Used for isolating test data.
            * [Get account balances endpoint](#get-/accounts/-account_id-/balances): Used for verifying test results.
            * [Generate payment URI endpoint](#post-/accounts/-account_id-/payment_uris): Used for testing receiving payments.
            * [Send payment endpoint:](#post-/accounts/-account_id-/payments): Used for testing sending payments.
      * To test sending and receiving payments off-chain:
            * [Get KYC sample endpoint:](#get-/kyc_sample): Used for testing sending payments equal to or above the Travel Rule threshold limit. 
      * debug
            * [Get account events](#get-/get-events): Used for debugging the test suite. 

      You can implement some of these endpoints selectively if they are used for testing subset
      features. For example, the KYC sample endpoint is not required until you test payments that
      trigger the Travel Rule. The Diem MiniWallet Test Suite also provides tests to verify that
      the MiniWallet API build for your application meets requirements for running payment integration 
      tests. We will continue to improve and develop the Diem MiniWallet Test Suite to cover more use cases. 

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
tags:
  - name: Test sending and receiving payments on-chain
    description: >
        The following are the minimum required endpoints for running the Diem MiniWallet Test Suite
        to test sending and receiving payments under the Travel Rule threshold limit. 
  - name: Test sending and receiving payments off-chain
    description: >
        To test transactions that use the Diem off-chain API, you will need to use the following
        required endpoint. 
  - name: debug
    description: >
        This is an optional endpoint you can use for debugging. 

paths:
  /accounts:
    post:
      summary: Create a new account
      description: >
          This method creates a new account. 
          * The Diem MiniWallet Test Suite isolates test data by creating a new account for each test case. 
          * You should store the response account ID for all the operations to the account. 
          * The balances property value shows the initial currency deposits to the account. You can use the get account balances endpoint to check the account balances available after creating the account. 
          * When the account is required to provide Know Your Customer (KYC) data during an off-chain transaction, the server should use the kyc_data property value as the KycDataObject and send it to the counterparty service.
          * If the `kyc_data` property value is valid but does not meet the business criteria, the server should not raise an error. 
      operationId: create-account
      tags:
        - Minimum
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      responses:
        201:
          description: Account is created; currency balances are deposited to the account if provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/ClientError'
  /accounts/{account_id}/balances:
    get:
      summary: This method gets the currency balances for the account specified.
      operationId: balances
      tags:
        - Minimum
      parameters:
      - name: account_id
        in: path
        description: Account ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns account balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balances'
        400:
          $ref: '#/components/responses/ClientError'
  /accounts/{account_id}/payments:
    post:
      summary: This method sends a payment to another account. 
      operationId: send-payment
      tags:
        - Minimum
      parameters:
      - name: account_id
        in: path
        description: Account ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        202:
          description: >
              The server accepts the payment request. 
              * The server may reflect the payment sent in the account balance immediately. 
              The funds being sent are considered to be in the process of being transferred 
              out and should not be used for any other purpose. 
              * Once you receive the response, expect the payment to be sent in a short time. 
              But it is not a limit to the server to complete the payment before respond the request.
              * You can confirm if the payment is completed by:
                    * Checking if the sending and receiving account balances have been updated accordingly. 
                    * Checking if the sending or receiving wallet app exposes an event using the get account events endpoint. 
              * Use the get account events endpoint to confirm if the action has failed. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          $ref: '#/components/responses/ClientError'
  /accounts/{account_id}/payment_uris:
    post:
      summary: This method generates a new payment URI to receive payments.
      operationId: gen-payment-uri
      tags:
        - Minimum
      parameters:
      - name: account_id
        in: path
        description: Account ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentURI'
        required: true
      responses:
        201:
          description: A new payment URI is generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentURI'
        400:
          $ref: '#/components/responses/ClientError'
  /kyc_sample:
    get:
      summary: Get KYC sample data.
      operationId: kyc-sample
      tags:
        - Off-chain
      description: >
          This method can be used to test different behaviors during the off-chain KYC data exchange 
          process. The data is used by the counterparty wallet app to set up its test account’s KYC data. 
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycSample'
  /accounts/{account_id}/events:
    get:
      operationId: get-events
      summary: Get account events
      tags:
        - Optional
      description: >-
          This method can be used to collect the context of a failure and will be ignored if the endpoint 
          has not been implemented or if the call fails. The Diem MiniWallet implements the following events:

            | Event Type                | Data Attribute Type | Description                                                                       |
            |---------------------------|---------------------|-----------------------------------------------------------------------------------|
            | `info`                    | string              | Human readable message for what has occured.                                      |
            | `created_account`         | JSON-encoded string | An account has been created.                                                      |
            | `created_transaction`     | JSON-encoded string | An incoming or outgoing transaction has been created.                             |
            | `updated_transaction`     | JSON-encoded string | An outgoing transaction has been updated due to Diem transactions being submitted or executed. |
            | `created_payment_uri`     | JSON-encoded string | A PaymentURI has been created.                                                    |
            | `created_payment_command` | JSON-encoded string | Off-chain payment command has been created.                                       |
            | `updated_payment_command` | JSON-encoded string | Off-chain payment command has been updated.                                       |

      parameters:
      - name: account_id
        in: path
        description: Account ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          $ref: '#/components/responses/ClientError'
components:
  responses:
    ClientError:
      description: Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: error message
              stacktrace:
                type: string
                description: stacktrace of the error
        text/plain:
          schema:
            type: string
            example: error message and stacktrace
  schemas:
    Balances:
      type: object
      writeOnly: true
      properties:
        XUS:
          type: integer
          example: 1000000000
        XDX:
          type: integer
    KycDataObject:
      type: string
      description: >
        KycDataObject should be valid object that matches Diem off-chain KycDataObject
        listed at https://dip.diem.com/dip-1/#kycdataobject.
      example: "{\"type\": \"individual\", \"payload_version\": 1, \"given_name\": \"Tom\", \"surname\": \"Jack\"}"
    Account:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          readOnly: true
    CreateAccountRequest:
      type: object
      properties:
        kyc_data:
          $ref: '#/components/schemas/KycDataObject'
        balances:
          $ref: '#/components/schemas/Balances'
    PaymentURI:
      required:
      - id
      - account_id
      - payment_uri
      type: object
      properties:
        id:
          type: string
          readOnly: true
        account_id:
          type: string
          readOnly: true
        currency:
          type: string
          enum: ["XUS", "XDX"]
          writeOnly: true
        amount:
          type: integer
          writeOnly: true
        payment_uri:
          type: string
          description: >
              Diem intent identifier defined in DIP-5.

              Server should create a new subaddress for the account, and then encode it with
              an onchain account address as a new payment URI.
              The currency and amount in the request body should also be encoded into this
              URI if they are provided.
          readOnly: true
    Payment:
      required:
      - id
      - account_id
      - amount
      - currency
      - payee
      type: object
      properties:
        id:
          type: string
          readOnly: true
        account_id:
          type: string
          readOnly: true
        currency:
          type: string
          enum:
          - XUS
          - XDX
        amount:
          type: integer
        payee:
          type: string
          description: >
              The receiver address of the payment.
              Only support account identifier defined in DIP-5 for now.
              We will add Diem ID support in the future when the protocol related is stabilized.
    KycSample:
      description: >
          KYC data sample for clients to create accounts to do off-chain KYC data exchanging tests.

          1. `minimum` property value should be minimum valid `KycDataObject` that can pass server's
            KYC evaluation without any additional actions during the off-chain KYC data exchange
            process.
          2. `reject` property value should be an example of `KycDataObject` that will be rejected
            by server if it is presented in a counterparty service's KYC data.
          3. `soft_match` property value should be an example of `KycDataObject` that will trigger
            `soft_match` process and pass KYC evaluation after `additional_kyc_data` is provided
            by counterparty service.
          4. `soft_reject` provided value should be an example of `KycDataObject` that will trigger
            `soft_match` process and then be rejected by KYC evaluation after `additional_kyc_data`
            is provided.
      required:
      - minimum
      - reject
      - soft_match
      - soft_reject
      type: object
      properties:
        minimum:
          $ref: '#/components/schemas/KycDataObject'
        reject:
          $ref: '#/components/schemas/KycDataObject'
        soft_match:
          $ref: '#/components/schemas/KycDataObject'
        soft_reject:
          $ref: '#/components/schemas/KycDataObject'
    Event:
      description: >
          Event is optional to implement; it is log of what happened in the
          system. Useful when the test failed. It's free to add any kind of event type and
          data.
      required:
      - id
      - account_id
      - type
      - data
      - timestamp
      type: object
      properties:
        id:
          type: string
          readOnly: true
        account_id:
          type: string
          readOnly: true
        type:
          type: string
          description: Event type, used for decoding data.
          readOnly: true
        data:
          type: string
          description: >
              Event data can be human readable message, JSON-encoded string
              or any other format. However, one event type should only have one data
              format.
          readOnly: true
        timestamp:
          type: integer
          description: Milliseconds since the unix epoch. The time event object is
            created by the system.
          readOnly: true
